{"Structs/PillarboxConfiguration.html#/s:9Pillarbox0A13ConfigurationV8strategyAA0A13QueueStrategyOvp":{"name":"strategy","abstract":"<p>The queuing strategy to use</p>","parent_name":"PillarboxConfiguration"},"Structs/PillarboxConfiguration.html#/s:9Pillarbox0A13ConfigurationV8strategyAcA0A13QueueStrategyO_tcfc":{"name":"init(strategy:)","abstract":"<p>Undocumented</p>","parent_name":"PillarboxConfiguration"},"Structs/PillarboxConfiguration.html":{"name":"PillarboxConfiguration","abstract":"<p>This struct poses as a configuration bag for all of Pillarbox&rsquo; configurable parameters.</p>"},"Protocols/QueueIdentifiable.html#/s:9Pillarbox17QueueIdentifiableP2idSSvp":{"name":"id","abstract":"<p>The stable identity of the entity associated with this instance.</p>","parent_name":"QueueIdentifiable"},"Protocols/QueueIdentifiable.html":{"name":"QueueIdentifiable","abstract":"<p>A class of types whose instances hold the value of an entity with stable identity.</p>"},"Enums/PillarboxQueueStrategy.html#/s:9Pillarbox0A13QueueStrategyO4fifoyA2CmF":{"name":"fifo","abstract":"<p>When using the first in first out strategy, items are popped from the end of the queue.","parent_name":"PillarboxQueueStrategy"},"Enums/PillarboxQueueStrategy.html#/s:9Pillarbox0A13QueueStrategyO4lifoyA2CmF":{"name":"lifo","abstract":"<p>When using the last in first out strategy, items are popped from the start of the queue.","parent_name":"PillarboxQueueStrategy"},"Enums/PillarboxQueueStrategy.html":{"name":"PillarboxQueueStrategy","abstract":"<p>The queuing strategy to use when peeking and popping items off the queue.</p>"},"Classes/Pillarbox.html#/s:9PillarboxAAC4name3url13configurationAByxGSS_10Foundation3URLVAA0A13ConfigurationVtcfc":{"name":"init(name:url:configuration:)","abstract":"<p>Initializes and returns a newly allocated Pillarbox.</p>","parent_name":"Pillarbox"},"Classes/Pillarbox.html#/s:9PillarboxAAC4peekxSgyF":{"name":"peek()","abstract":"<p>Retrieves, but does not remove, the head of the queue, or returns <code>nil</code>","parent_name":"Pillarbox"},"Classes/Pillarbox.html#/s:9PillarboxAAC3popxSgyF":{"name":"pop()","abstract":"<p>Retrieves and removes the head of the queue, or returns <code>nil</code>","parent_name":"Pillarbox"},"Classes/Pillarbox.html#/s:9PillarboxAAC4pushySSxF":{"name":"push(_:)","abstract":"<p>Pushes the specified element into the queue and persist it on the disk.</p>","parent_name":"Pillarbox"},"Classes/Pillarbox.html#/s:9PillarboxAAC7isEmptySbvp":{"name":"isEmpty","abstract":"<p>A Boolean value indicating whether the queue is empty.</p>","parent_name":"Pillarbox"},"Classes/Pillarbox.html#/s:9PillarboxAAC5countSivp":{"name":"count","abstract":"<p>The number of elements in the queue.</p>","parent_name":"Pillarbox"},"Classes/Pillarbox.html#/s:9PillarboxAAC8elementsSayxGvp":{"name":"elements","abstract":"<p>All elements in the queue</p>","parent_name":"Pillarbox"},"Classes/Pillarbox.html#/s:9PillarboxAACyxSgSScip":{"name":"subscript(_:)","abstract":"<p>Undocumented</p>","parent_name":"Pillarbox"},"Classes/Pillarbox.html":{"name":"Pillarbox","abstract":"<p>A object-based queue which is persisted to the disk. Supports both FIFO and LIFO strategies. Should be thread-safe as well.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}